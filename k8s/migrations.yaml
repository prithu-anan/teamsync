# Migration ConfigMaps for all services
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-migration-files
  namespace: teamsync
data:
  V1__createTable.sql: |
    CREATE TABLE users (
       id BIGSERIAL PRIMARY KEY,
       email VARCHAR(255) NOT NULL UNIQUE,
       password VARCHAR(255) NOT NULL,
       name VARCHAR(255) NOT NULL,
       is_active BOOLEAN NOT NULL DEFAULT TRUE,
       created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
       last_login_at TIMESTAMP
    );

    CREATE INDEX idx_users_email ON users(email);
    CREATE INDEX idx_users_is_active ON users(is_active);

    CREATE TABLE blacklisted_tokens (
       id BIGSERIAL PRIMARY KEY,
       token VARCHAR(255) NOT NULL UNIQUE,
       blacklisted_at TIMESTAMP NOT NULL,
       expires_at TIMESTAMP NOT NULL
    );

    CREATE INDEX idx_blacklisted_tokens_token ON blacklisted_tokens(token);
    CREATE INDEX idx_blacklisted_tokens_expires_at ON blacklisted_tokens(expires_at);

    CREATE TABLE refresh_tokens (
       id BIGSERIAL PRIMARY KEY,
       token VARCHAR(255) NOT NULL UNIQUE,
       expiry_date TIMESTAMP NOT NULL,
       user_id BIGINT NOT NULL,
       user_agent VARCHAR(255) NOT NULL,
       ip_address VARCHAR(45) NOT NULL,
       created_at TIMESTAMP NOT NULL,
       FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    );

    CREATE INDEX idx_refresh_tokens_token ON refresh_tokens(token);
    CREATE INDEX idx_refresh_tokens_user_id ON refresh_tokens(user_id);
    CREATE INDEX idx_refresh_tokens_expiry_date ON refresh_tokens(expiry_date);
  V2__refactor_users_table.sql: |
    -- Add any additional migration if needed
    -- This is a placeholder for V2 migration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-migration-files
  namespace: teamsync
data:
  V1__createTable.sql: |
    CREATE TABLE users (
       id BIGSERIAL PRIMARY KEY,
       email VARCHAR(255) NOT NULL UNIQUE,
       password VARCHAR(255) NOT NULL,
       name VARCHAR(255) NOT NULL,
       is_active BOOLEAN NOT NULL DEFAULT TRUE,
       created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
       last_login_at TIMESTAMP
    );

    CREATE INDEX idx_users_email ON users(email);
    CREATE INDEX idx_users_is_active ON users(is_active);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: project-migration-files
  namespace: teamsync
data:
  V1__createTable.sql: |
    CREATE TABLE projects (
       id BIGSERIAL PRIMARY KEY,
       name VARCHAR(255) NOT NULL,
       description TEXT,
       created_by BIGINT NOT NULL,
       created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
       updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

    CREATE INDEX idx_projects_created_by ON projects(created_by);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: task-migration-files
  namespace: teamsync
data:
  V1__createTable.sql: |
    CREATE TABLE tasks (
       id BIGSERIAL PRIMARY KEY,
       title VARCHAR(255) NOT NULL,
       description TEXT,
       project_id BIGINT NOT NULL,
       assigned_to BIGINT,
       status VARCHAR(50) NOT NULL DEFAULT 'TODO',
       created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
       updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

    CREATE INDEX idx_tasks_project_id ON tasks(project_id);
    CREATE INDEX idx_tasks_assigned_to ON tasks(assigned_to);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: message-migration-files
  namespace: teamsync
data:
  V1__createTable.sql: |
    CREATE TABLE messages (
       id BIGSERIAL PRIMARY KEY,
       content TEXT NOT NULL,
       sender_id BIGINT NOT NULL,
       project_id BIGINT,
       created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

    CREATE INDEX idx_messages_sender_id ON messages(sender_id);
    CREATE INDEX idx_messages_project_id ON messages(project_id);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: feed-migration-files
  namespace: teamsync
data:
  V1__createTable.sql: |
    CREATE TABLE feed_entries (
       id BIGSERIAL PRIMARY KEY,
       content TEXT NOT NULL,
       user_id BIGINT NOT NULL,
       project_id BIGINT,
       created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

    CREATE INDEX idx_feed_entries_user_id ON feed_entries(user_id);
    CREATE INDEX idx_feed_entries_project_id ON feed_entries(project_id);
