name: Build and Push Images Only

on:
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.REGISTRY_USER }}

permissions:
  contents: read
  id-token: write

jobs:
  build-java-services:
    name: Build Java Services
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service:
          - name: api-gateway
            context: ./api-gateway
            port: 8080
          - name: auth-service
            context: ./auth-service
            port: 8081
          - name: feed-management-service
            context: ./feed-management-service
            port: 8090
          - name: message-management-service
            context: ./message-management-service
            port: 8091
          - name: project-management-service
            context: ./project-management-service
            port: 8083
          - name: task-management-service
            context: ./task-management-service
            port: 8089
          - name: user-management-service
            context: ./user-management-service
            port: 8082
          - name: notification-service
            context: ./notification-service
            port: 8092

    services:
      docker:
        image: docker:24.0.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Create Docker network
        run: docker network inspect teamsync_network || docker network create teamsync_network

      - name: Start PostgreSQL & Flyway (for auth-service)
        if: matrix.service.name == 'auth-service'
        run: |
          cd auth-service
          docker compose up -d auth-postgres flyway
          echo "Waiting for DB to become healthy..."
          for i in {1..20}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(docker ps -qf name=auth-postgres))
            echo "Health status: $STATUS"
            if [ "$STATUS" == "healthy" ]; then
              echo "Database is healthy."
              break
            fi
            sleep 5
          done
          echo "Waiting for Flyway to finish..."
          docker compose logs flyway

      - name: Build Java service
        run: |
          cd ${{ matrix.service.context }}
          chmod +x ./mvnw
          ./mvnw -B clean package -Dmaven.test.skip=true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-ai-backend:
    name: Build AI Backend
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24.0.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: './teamsync-ai-backend/requirements.txt'
      
      - name: Clear pip cache and install dependencies
        run: |
          pip cache purge || true
          rm -rf ~/.cache/pip || true
          cd teamsync-ai-backend
          pip install --no-cache-dir -r requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/teamsync-ai-backend
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./teamsync-ai-backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24.0.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './teamsync-social-flow/package-lock.json'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/teamsync-social-flow
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./teamsync-social-flow
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
            VITE_AZURE_BLOB_SAS_TOKEN=${{ secrets.VITE_AZURE_BLOB_SAS_TOKEN }}
            VITE_AZURE_BLOB_SAS_URL=${{ secrets.VITE_AZURE_BLOB_SAS_URL }}
            VITE_ZEGO_APP_ID=${{ secrets.VITE_ZEGO_APP_ID }}
            VITE_ZEGO_SERVER_SECRET=${{ secrets.VITE_ZEGO_SERVER_SECRET }}
            VITE_WEBSOCKET_URL=${{ secrets.VITE_WEBSOCKET_URL }}
