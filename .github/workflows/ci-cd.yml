name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.REGISTRY_USER }}

permissions:
  contents: read
  id-token: write

jobs:
  build-java-services:
    name: Build Java Services
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service:
          - name: api-gateway
            context: ./api-gateway
            port: 8080
          - name: auth-service
            context: ./auth-service
            port: 8081
          - name: feed-management-service
            context: ./feed-management-service
            port: 8090
          - name: message-management-service
            context: ./message-management-service
            port: 8091
          - name: project-management-service
            context: ./project-management-service
            port: 8083
          - name: task-management-service
            context: ./task-management-service
            port: 8089
          - name: user-management-service
            context: ./user-management-service
            port: 8082
          - name: notification-service
            context: ./notification-service
            port: 8092

    services:
      docker:
        image: docker:24.0.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Create Docker network
        run: docker network inspect teamsync_network || docker network create teamsync_network

      - name: Start PostgreSQL (for auth-service)
        if: matrix.service.name == 'auth-service'
        run: |
          cd auth-service
          docker compose up -d auth-postgres
          echo "Waiting for PostgreSQL to start..."
          sleep 10

      - name: Build Java service
        run: |
          cd ${{ matrix.service.context }}
          chmod +x ./mvnw
          ./mvnw -B clean package -Dmaven.test.skip=true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-ai-backend:
    name: Build AI Backend
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    services:
      docker:
        image: docker:24.0.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: './teamsync-ai-backend/requirements.txt'
      
      - name: Clear pip cache and install dependencies
        run: |
          pip cache purge || true
          rm -rf ~/.cache/pip || true
          cd teamsync-ai-backend
          pip install --no-cache-dir -r requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/teamsync-ai-backend
          tags: |
            type=raw,value=latest

      - name: Create Firebase credentials file
        run: |
          cd teamsync-ai-backend
          cat > firebase-creds.json <<EOF
          ${{ secrets.FIREBASE_SA_KEY }}
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./teamsync-ai-backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    services:
      docker:
        image: docker:24.0.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './teamsync-social-flow/package-lock.json'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/teamsync-social-flow
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./teamsync-social-flow
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
            VITE_AZURE_BLOB_SAS_TOKEN=${{ secrets.VITE_AZURE_BLOB_SAS_TOKEN }}
            VITE_AZURE_BLOB_SAS_URL=${{ secrets.VITE_AZURE_BLOB_SAS_URL }}
            VITE_ZEGO_APP_ID=${{ secrets.VITE_ZEGO_APP_ID }}
            VITE_ZEGO_SERVER_SECRET=${{ secrets.VITE_ZEGO_SERVER_SECRET }}
            VITE_WEBSOCKET_URL=${{ secrets.VITE_WEBSOCKET_URL }}

  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: [build-java-services, build-ai-backend, build-frontend]
    if: github.event_name == 'push'
    
    steps:
      - name: Deploy all services
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            set -eux
            
            # Comprehensive cleanup of all existing containers and networks
            echo "Performing comprehensive cleanup..."
            
            # Stop and remove all containers
            echo "Stopping all running containers..."
            docker stop $(docker ps -q) || true
            docker rm $(docker ps -aq) || true
            
            # Remove all networks (except default ones)
            echo "Cleaning up networks..."
            docker network prune -f || true
            docker network rm teamsync_network || true
            
            # Create fresh network
            echo "Creating fresh network..."
            docker network create teamsync_network
            
            # Pull all service images
            echo "Pulling all service images..."
            docker pull ${{ env.IMAGE_PREFIX }}/api-gateway:latest || echo "Warning: Failed to pull api-gateway:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/auth-service:latest || echo "Warning: Failed to pull auth-service:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/feed-management-service:latest || echo "Warning: Failed to pull feed-management-service:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/message-management-service:latest || echo "Warning: Failed to pull message-management-service:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/project-management-service:latest || echo "Warning: Failed to pull project-management-service:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/task-management-service:latest || echo "Warning: Failed to pull task-management-service:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/user-management-service:latest || echo "Warning: Failed to pull user-management-service:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/notification-service:latest || echo "Warning: Failed to pull notification-service:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/teamsync-ai-backend:latest || echo "Warning: Failed to pull teamsync-ai-backend:latest"
            docker pull ${{ env.IMAGE_PREFIX }}/teamsync-social-flow:latest || echo "Warning: Failed to pull teamsync-social-flow:latest"
            
            # All containers have been cleaned up in the comprehensive cleanup above
            
            # Start database services first
            echo "Starting database services..."
            
            # Auth Service Database
            docker run -d \
              --name auth-postgres \
              --network teamsync_network \
              -e POSTGRES_DB=auth-db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -p 5431:5432 \
              postgres:15
            
            # User Management Database
            docker run -d \
              --name user-management-postgres \
              --network teamsync_network \
              -e POSTGRES_DB=user_management_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -p 5432:5432 \
              postgres:15
            
            # Project Management Database
            docker run -d \
              --name project-management-postgres \
              --network teamsync_network \
              -e POSTGRES_DB=project_management_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -p 5433:5432 \
              postgres:15
            
            # Task Management Database
            docker run -d \
              --name task-management-postgres \
              --network teamsync_network \
              -e POSTGRES_DB=task_management_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -p 5434:5432 \
              postgres:15
            
            # Feed Management Database
            docker run -d \
              --name feed-management-postgres \
              --network teamsync_network \
              -e POSTGRES_DB=feed_management_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -p 5435:5432 \
              postgres:15
            
            # Message Management Database
            docker run -d \
              --name message-management-postgres \
              --network teamsync_network \
              -e POSTGRES_DB=message_management_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -p 5436:5432 \
              postgres:15
            
            # Notification Service MongoDB
            docker run -d \
              --name notification-mongo \
              --network teamsync_network \
              -e MONGO_INITDB_DATABASE=notification_db \
              -p 27017:27017 \
              mongo:7.0
            
            # Kafka Infrastructure
            echo "Starting Kafka infrastructure..."
            
            # Zookeeper
            docker run -d \
              --name zookeeper \
              --network teamsync_network \
              -e ZOOKEEPER_CLIENT_PORT=2181 \
              -e ZOOKEEPER_TICK_TIME=2000 \
              confluentinc/cp-zookeeper:7.4.0
            
            # Kafka Broker
            docker run -d \
              --name broker \
              --network teamsync_network \
              -p 29092:29092 \
              -e KAFKA_BROKER_ID=1 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:29092 \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              -e KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1 \
              -e KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1 \
              confluentinc/cp-kafka:7.4.0
            
            # Schema Registry
            docker run -d \
              --name schema-registry \
              --network teamsync_network \
              -p 8085:8081 \
              -e SCHEMA_REGISTRY_HOST_NAME=schema-registry \
              -e SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=broker:29092 \
              confluentinc/cp-schema-registry:7.4.0
            
            # Wait for databases to be ready
            echo "Waiting for databases to be ready..."
            sleep 20
            
            # Start all services
            echo "Starting all services..."
            
            # Start API Gateway
            docker run -d \
              --name api_gateway \
              --network teamsync_network \
              -p 8080:8080 \
              ${{ env.IMAGE_PREFIX }}/api-gateway:latest
            
            # Start Auth Service
            docker run -d \
              --name auth-service \
              --network teamsync_network \
              -p 8081:8081 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://auth-postgres:5432/auth-db \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=postgres \
              ${{ env.IMAGE_PREFIX }}/auth-service:latest
            
            # Start User Management Service
            docker run -d \
              --name user-management-service \
              --network teamsync_network \
              -p 8082:8082 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://user-management-postgres:5432/user_management_db \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=postgres \
              -e AZURE_CONNECTION_STRING="${{ secrets.AZURE_CONNECTION_STRING }}" \
              -e AZURE_CONTAINER_NAME="${{ secrets.AZURE_CONTAINER_NAME }}" \
              -e AZURE_ACCOUNT_NAME="${{ secrets.AZURE_ACCOUNT_NAME }}" \
              -e AZURE_SAS_TOKEN="${{ secrets.AZURE_SAS_TOKEN }}" \
              ${{ env.IMAGE_PREFIX }}/user-management-service:latest
            
            # Start Project Management Service
            docker run -d \
              --name project-management-service \
              --network teamsync_network \
              -p 8083:8083 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://project-management-postgres:5432/project_management_db \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=postgres \
              ${{ env.IMAGE_PREFIX }}/project-management-service:latest
            
            # Start Feed Management Service
            docker run -d \
              --name feed-management-service \
              --network teamsync_network \
              -p 8090:8090 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://feed-management-postgres:5432/feed_management_db \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=postgres \
              -e AZURE_CONNECTION_STRING="${{ secrets.AZURE_CONNECTION_STRING }}" \
              -e AZURE_CONTAINER_NAME="${{ secrets.AZURE_CONTAINER_NAME }}" \
              -e AZURE_ACCOUNT_NAME="${{ secrets.AZURE_ACCOUNT_NAME }}" \
              -e AZURE_SAS_TOKEN="${{ secrets.AZURE_SAS_TOKEN }}" \
              ${{ env.IMAGE_PREFIX }}/feed-management-service:latest
            
            # Start Message Management Service
            docker run -d \
              --name message-management-service \
              --network teamsync_network \
              -p 8091:8091 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://message-management-postgres:5432/message_management_db \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=postgres \
              -e AZURE_CONNECTION_STRING="${{ secrets.AZURE_CONNECTION_STRING }}" \
              -e AZURE_CONTAINER_NAME="${{ secrets.AZURE_CONTAINER_NAME }}" \
              -e AZURE_ACCOUNT_NAME="${{ secrets.AZURE_ACCOUNT_NAME }}" \
              -e AZURE_SAS_TOKEN="${{ secrets.AZURE_SAS_TOKEN }}" \
              ${{ env.IMAGE_PREFIX }}/message-management-service:latest
            
            # Start Task Management Service
            docker run -d \
              --name task-management-service \
              --network teamsync_network \
              -p 8089:8089 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://task-management-postgres:5432/task_management_db \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=postgres \
              ${{ env.IMAGE_PREFIX }}/task-management-service:latest
            
            # Start Notification Service
            docker run -d \
              --name notification-service \
              --network teamsync_network \
              -p 8092:8092 \
              -e SPRING_DATA_MONGODB_URI=mongodb://notification-mongo:27017/notification_db \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092 \
              -e SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-registry:8081 \
              -e SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-registry:8081 \
              ${{ env.IMAGE_PREFIX }}/notification-service:latest
            
            # Start AI Backend
            docker run -d \
              --name teamsync-ai-backend \
              --network teamsync_network \
              -p 8000:8000 \
              -e AUTH_DATABASE_URL="${{ secrets.AUTH_DATABASE_URL }}" \
              -e PROJECT_DATABASE_URL="${{ secrets.PROJECT_DATABASE_URL }}" \
              -e TASK_DATABASE_URL="${{ secrets.TASK_DATABASE_URL }}" \
              -e USER_DATABASE_URL="${{ secrets.USER_DATABASE_URL }}" \
              -e MESSAGE_DATABASE_URL="${{ secrets.MESSAGE_DATABASE_URL }}" \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              -e DEEPSEEK_API_KEY="${{ secrets.DEEPSEEK_API_KEY }}" \
              -e QUADRANT_URL="${{ secrets.QUADRANT_URL }}" \
              -e QUADRANT_API_KEY="${{ secrets.QUADRANT_API_KEY }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e PROJECT_ID="${{ secrets.PROJECT_ID }}" \
              -e BASE_SERVER_URL="${{ secrets.BASE_SERVER_URL }}" \
              ${{ env.IMAGE_PREFIX }}/teamsync-ai-backend:latest
            
            # Start Frontend
            docker run -d \
              --name frontend \
              -p 3000:80 \
              ${{ env.IMAGE_PREFIX }}/teamsync-social-flow:latest
            
            echo "All services started successfully!"
            docker ps
            
            # Wait for services to be ready
            echo "Waiting for services to initialize..."
            sleep 30
            
            # Health check function
            health_check() {
              local service_name=$1
              local url=$2
              local max_attempts=30
              local attempt=1
              
              echo "Checking health of $service_name at $url"
              
              while [ $attempt -le $max_attempts ]; do
                if curl -f -s "$url" > /dev/null 2>&1; then
                  echo "✅ $service_name is healthy!"
                  return 0
                else
                  echo "⏳ Attempt $attempt/$max_attempts: $service_name not ready yet..."
                  sleep 10
                  attempt=$((attempt + 1))
                fi
              done
              
              echo "❌ $service_name failed health check after $max_attempts attempts"
              return 1
            }
            
            # Perform health checks for all services
            echo "Starting comprehensive health checks..."
            
            # Check API Gateway
            if ! health_check "API Gateway" "http://localhost:8080/health"; then
              echo "❌ API Gateway health check failed - deployment aborted"
              exit 1
            fi
            
            # Check Auth Service
            if ! health_check "Auth Service" "http://localhost:8081/actuator/health"; then
              echo "❌ Auth Service health check failed - deployment aborted"
              exit 1
            fi
            
            # Check User Management Service
            if ! health_check "User Management Service" "http://localhost:8082/actuator/health"; then
              echo "❌ User Management Service health check failed - deployment aborted"
              exit 1
            fi
            
            # Check Project Management Service
            if ! health_check "Project Management Service" "http://localhost:8083/actuator/health"; then
              echo "❌ Project Management Service health check failed - deployment aborted"
              exit 1
            fi
            
            # Check Task Management Service
            if ! health_check "Task Management Service" "http://localhost:8089/actuator/health"; then
              echo "❌ Task Management Service health check failed - deployment aborted"
              exit 1
            fi
            
            # Check Feed Management Service
            if ! health_check "Feed Management Service" "http://localhost:8090/actuator/health"; then
              echo "❌ Feed Management Service health check failed - deployment aborted"
              exit 1
            fi
            
            # Check Message Management Service
            if ! health_check "Message Management Service" "http://localhost:8091/actuator/health"; then
              echo "❌ Message Management Service health check failed - deployment aborted"
              exit 1
            fi
            
            # Check Notification Service
            if ! health_check "Notification Service" "http://localhost:8092/actuator/health"; then
              echo "❌ Notification Service health check failed - deployment aborted"
              exit 1
            fi
            
            # Check AI Backend
            if ! health_check "AI Backend" "http://localhost:8000/api/health"; then
              echo "❌ AI Backend health check failed - deployment aborted"
              exit 1
            fi
            
            # Frontend doesn't have a health endpoint, skipping health check
            echo "ℹ️  Frontend health check skipped (no health endpoint)"
            
            echo "🎉 All services are healthy and deployment successful!"
            
            # Final status check
            echo "Final service status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Create a rollback script for emergency use
            cat > /tmp/rollback.sh << 'EOF'
            #!/bin/bash
            echo "🔄 Rolling back deployment..."
            docker stop $(docker ps -q) || true
            docker rm $(docker ps -aq) || true
            docker network prune -f || true
            echo "✅ Rollback completed"
            EOF
            chmod +x /tmp/rollback.sh
            echo "📝 Rollback script created at /tmp/rollback.sh"