/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.teamsync.task_management_service.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaskAssignedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6031482025736541900L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskAssignedEvent\",\"namespace\":\"com.teamsync.task_management_service.event\",\"fields\":[{\"name\":\"taskId\",\"type\":\"long\"},{\"name\":\"taskTitle\",\"type\":\"string\"},{\"name\":\"assignedToUserId\",\"type\":\"long\"},{\"name\":\"assignedByUserId\",\"type\":\"long\"},{\"name\":\"projectId\",\"type\":\"long\"},{\"name\":\"projectTitle\",\"type\":\"string\"},{\"name\":\"assignedAt\",\"type\":\"string\"},{\"name\":\"deadline\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"priority\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskAssignedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskAssignedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskAssignedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskAssignedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskAssignedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskAssignedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskAssignedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskAssignedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskAssignedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long taskId;
  private java.lang.CharSequence taskTitle;
  private long assignedToUserId;
  private long assignedByUserId;
  private long projectId;
  private java.lang.CharSequence projectTitle;
  private java.lang.CharSequence assignedAt;
  private java.lang.CharSequence deadline;
  private java.lang.CharSequence priority;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskAssignedEvent() {}

  /**
   * All-args constructor.
   * @param taskId The new value for taskId
   * @param taskTitle The new value for taskTitle
   * @param assignedToUserId The new value for assignedToUserId
   * @param assignedByUserId The new value for assignedByUserId
   * @param projectId The new value for projectId
   * @param projectTitle The new value for projectTitle
   * @param assignedAt The new value for assignedAt
   * @param deadline The new value for deadline
   * @param priority The new value for priority
   */
  public TaskAssignedEvent(java.lang.Long taskId, java.lang.CharSequence taskTitle, java.lang.Long assignedToUserId, java.lang.Long assignedByUserId, java.lang.Long projectId, java.lang.CharSequence projectTitle, java.lang.CharSequence assignedAt, java.lang.CharSequence deadline, java.lang.CharSequence priority) {
    this.taskId = taskId;
    this.taskTitle = taskTitle;
    this.assignedToUserId = assignedToUserId;
    this.assignedByUserId = assignedByUserId;
    this.projectId = projectId;
    this.projectTitle = projectTitle;
    this.assignedAt = assignedAt;
    this.deadline = deadline;
    this.priority = priority;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taskId;
    case 1: return taskTitle;
    case 2: return assignedToUserId;
    case 3: return assignedByUserId;
    case 4: return projectId;
    case 5: return projectTitle;
    case 6: return assignedAt;
    case 7: return deadline;
    case 8: return priority;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taskId = (java.lang.Long)value$; break;
    case 1: taskTitle = (java.lang.CharSequence)value$; break;
    case 2: assignedToUserId = (java.lang.Long)value$; break;
    case 3: assignedByUserId = (java.lang.Long)value$; break;
    case 4: projectId = (java.lang.Long)value$; break;
    case 5: projectTitle = (java.lang.CharSequence)value$; break;
    case 6: assignedAt = (java.lang.CharSequence)value$; break;
    case 7: deadline = (java.lang.CharSequence)value$; break;
    case 8: priority = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'taskId' field.
   * @return The value of the 'taskId' field.
   */
  public long getTaskId() {
    return taskId;
  }


  /**
   * Sets the value of the 'taskId' field.
   * @param value the value to set.
   */
  public void setTaskId(long value) {
    this.taskId = value;
  }

  /**
   * Gets the value of the 'taskTitle' field.
   * @return The value of the 'taskTitle' field.
   */
  public java.lang.CharSequence getTaskTitle() {
    return taskTitle;
  }


  /**
   * Sets the value of the 'taskTitle' field.
   * @param value the value to set.
   */
  public void setTaskTitle(java.lang.CharSequence value) {
    this.taskTitle = value;
  }

  /**
   * Gets the value of the 'assignedToUserId' field.
   * @return The value of the 'assignedToUserId' field.
   */
  public long getAssignedToUserId() {
    return assignedToUserId;
  }


  /**
   * Sets the value of the 'assignedToUserId' field.
   * @param value the value to set.
   */
  public void setAssignedToUserId(long value) {
    this.assignedToUserId = value;
  }

  /**
   * Gets the value of the 'assignedByUserId' field.
   * @return The value of the 'assignedByUserId' field.
   */
  public long getAssignedByUserId() {
    return assignedByUserId;
  }


  /**
   * Sets the value of the 'assignedByUserId' field.
   * @param value the value to set.
   */
  public void setAssignedByUserId(long value) {
    this.assignedByUserId = value;
  }

  /**
   * Gets the value of the 'projectId' field.
   * @return The value of the 'projectId' field.
   */
  public long getProjectId() {
    return projectId;
  }


  /**
   * Sets the value of the 'projectId' field.
   * @param value the value to set.
   */
  public void setProjectId(long value) {
    this.projectId = value;
  }

  /**
   * Gets the value of the 'projectTitle' field.
   * @return The value of the 'projectTitle' field.
   */
  public java.lang.CharSequence getProjectTitle() {
    return projectTitle;
  }


  /**
   * Sets the value of the 'projectTitle' field.
   * @param value the value to set.
   */
  public void setProjectTitle(java.lang.CharSequence value) {
    this.projectTitle = value;
  }

  /**
   * Gets the value of the 'assignedAt' field.
   * @return The value of the 'assignedAt' field.
   */
  public java.lang.CharSequence getAssignedAt() {
    return assignedAt;
  }


  /**
   * Sets the value of the 'assignedAt' field.
   * @param value the value to set.
   */
  public void setAssignedAt(java.lang.CharSequence value) {
    this.assignedAt = value;
  }

  /**
   * Gets the value of the 'deadline' field.
   * @return The value of the 'deadline' field.
   */
  public java.lang.CharSequence getDeadline() {
    return deadline;
  }


  /**
   * Sets the value of the 'deadline' field.
   * @param value the value to set.
   */
  public void setDeadline(java.lang.CharSequence value) {
    this.deadline = value;
  }

  /**
   * Gets the value of the 'priority' field.
   * @return The value of the 'priority' field.
   */
  public java.lang.CharSequence getPriority() {
    return priority;
  }


  /**
   * Sets the value of the 'priority' field.
   * @param value the value to set.
   */
  public void setPriority(java.lang.CharSequence value) {
    this.priority = value;
  }

  /**
   * Creates a new TaskAssignedEvent RecordBuilder.
   * @return A new TaskAssignedEvent RecordBuilder
   */
  public static com.teamsync.task_management_service.event.TaskAssignedEvent.Builder newBuilder() {
    return new com.teamsync.task_management_service.event.TaskAssignedEvent.Builder();
  }

  /**
   * Creates a new TaskAssignedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskAssignedEvent RecordBuilder
   */
  public static com.teamsync.task_management_service.event.TaskAssignedEvent.Builder newBuilder(com.teamsync.task_management_service.event.TaskAssignedEvent.Builder other) {
    if (other == null) {
      return new com.teamsync.task_management_service.event.TaskAssignedEvent.Builder();
    } else {
      return new com.teamsync.task_management_service.event.TaskAssignedEvent.Builder(other);
    }
  }

  /**
   * Creates a new TaskAssignedEvent RecordBuilder by copying an existing TaskAssignedEvent instance.
   * @param other The existing instance to copy.
   * @return A new TaskAssignedEvent RecordBuilder
   */
  public static com.teamsync.task_management_service.event.TaskAssignedEvent.Builder newBuilder(com.teamsync.task_management_service.event.TaskAssignedEvent other) {
    if (other == null) {
      return new com.teamsync.task_management_service.event.TaskAssignedEvent.Builder();
    } else {
      return new com.teamsync.task_management_service.event.TaskAssignedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskAssignedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskAssignedEvent>
    implements org.apache.avro.data.RecordBuilder<TaskAssignedEvent> {

    private long taskId;
    private java.lang.CharSequence taskTitle;
    private long assignedToUserId;
    private long assignedByUserId;
    private long projectId;
    private java.lang.CharSequence projectTitle;
    private java.lang.CharSequence assignedAt;
    private java.lang.CharSequence deadline;
    private java.lang.CharSequence priority;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.teamsync.task_management_service.event.TaskAssignedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.taskTitle)) {
        this.taskTitle = data().deepCopy(fields()[1].schema(), other.taskTitle);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.assignedToUserId)) {
        this.assignedToUserId = data().deepCopy(fields()[2].schema(), other.assignedToUserId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.assignedByUserId)) {
        this.assignedByUserId = data().deepCopy(fields()[3].schema(), other.assignedByUserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.projectId)) {
        this.projectId = data().deepCopy(fields()[4].schema(), other.projectId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.projectTitle)) {
        this.projectTitle = data().deepCopy(fields()[5].schema(), other.projectTitle);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.assignedAt)) {
        this.assignedAt = data().deepCopy(fields()[6].schema(), other.assignedAt);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.deadline)) {
        this.deadline = data().deepCopy(fields()[7].schema(), other.deadline);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.priority)) {
        this.priority = data().deepCopy(fields()[8].schema(), other.priority);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskAssignedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.teamsync.task_management_service.event.TaskAssignedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskTitle)) {
        this.taskTitle = data().deepCopy(fields()[1].schema(), other.taskTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.assignedToUserId)) {
        this.assignedToUserId = data().deepCopy(fields()[2].schema(), other.assignedToUserId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assignedByUserId)) {
        this.assignedByUserId = data().deepCopy(fields()[3].schema(), other.assignedByUserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.projectId)) {
        this.projectId = data().deepCopy(fields()[4].schema(), other.projectId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.projectTitle)) {
        this.projectTitle = data().deepCopy(fields()[5].schema(), other.projectTitle);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.assignedAt)) {
        this.assignedAt = data().deepCopy(fields()[6].schema(), other.assignedAt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.deadline)) {
        this.deadline = data().deepCopy(fields()[7].schema(), other.deadline);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.priority)) {
        this.priority = data().deepCopy(fields()[8].schema(), other.priority);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'taskId' field.
      * @return The value.
      */
    public long getTaskId() {
      return taskId;
    }


    /**
      * Sets the value of the 'taskId' field.
      * @param value The value of 'taskId'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setTaskId(long value) {
      validate(fields()[0], value);
      this.taskId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taskId' field has been set.
      * @return True if the 'taskId' field has been set, false otherwise.
      */
    public boolean hasTaskId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taskId' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearTaskId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskTitle() {
      return taskTitle;
    }


    /**
      * Sets the value of the 'taskTitle' field.
      * @param value The value of 'taskTitle'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setTaskTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.taskTitle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'taskTitle' field has been set.
      * @return True if the 'taskTitle' field has been set, false otherwise.
      */
    public boolean hasTaskTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'taskTitle' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearTaskTitle() {
      taskTitle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignedToUserId' field.
      * @return The value.
      */
    public long getAssignedToUserId() {
      return assignedToUserId;
    }


    /**
      * Sets the value of the 'assignedToUserId' field.
      * @param value The value of 'assignedToUserId'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setAssignedToUserId(long value) {
      validate(fields()[2], value);
      this.assignedToUserId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'assignedToUserId' field has been set.
      * @return True if the 'assignedToUserId' field has been set, false otherwise.
      */
    public boolean hasAssignedToUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'assignedToUserId' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearAssignedToUserId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignedByUserId' field.
      * @return The value.
      */
    public long getAssignedByUserId() {
      return assignedByUserId;
    }


    /**
      * Sets the value of the 'assignedByUserId' field.
      * @param value The value of 'assignedByUserId'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setAssignedByUserId(long value) {
      validate(fields()[3], value);
      this.assignedByUserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'assignedByUserId' field has been set.
      * @return True if the 'assignedByUserId' field has been set, false otherwise.
      */
    public boolean hasAssignedByUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'assignedByUserId' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearAssignedByUserId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectId' field.
      * @return The value.
      */
    public long getProjectId() {
      return projectId;
    }


    /**
      * Sets the value of the 'projectId' field.
      * @param value The value of 'projectId'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setProjectId(long value) {
      validate(fields()[4], value);
      this.projectId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'projectId' field has been set.
      * @return True if the 'projectId' field has been set, false otherwise.
      */
    public boolean hasProjectId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'projectId' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearProjectId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getProjectTitle() {
      return projectTitle;
    }


    /**
      * Sets the value of the 'projectTitle' field.
      * @param value The value of 'projectTitle'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setProjectTitle(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.projectTitle = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'projectTitle' field has been set.
      * @return True if the 'projectTitle' field has been set, false otherwise.
      */
    public boolean hasProjectTitle() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'projectTitle' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearProjectTitle() {
      projectTitle = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignedAt' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssignedAt() {
      return assignedAt;
    }


    /**
      * Sets the value of the 'assignedAt' field.
      * @param value The value of 'assignedAt'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setAssignedAt(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.assignedAt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'assignedAt' field has been set.
      * @return True if the 'assignedAt' field has been set, false otherwise.
      */
    public boolean hasAssignedAt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'assignedAt' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearAssignedAt() {
      assignedAt = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'deadline' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeadline() {
      return deadline;
    }


    /**
      * Sets the value of the 'deadline' field.
      * @param value The value of 'deadline'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setDeadline(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.deadline = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'deadline' field has been set.
      * @return True if the 'deadline' field has been set, false otherwise.
      */
    public boolean hasDeadline() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'deadline' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearDeadline() {
      deadline = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * @return The value.
      */
    public java.lang.CharSequence getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder setPriority(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.priority = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'priority' field.
      * @return This builder.
      */
    public com.teamsync.task_management_service.event.TaskAssignedEvent.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskAssignedEvent build() {
      try {
        TaskAssignedEvent record = new TaskAssignedEvent();
        record.taskId = fieldSetFlags()[0] ? this.taskId : (java.lang.Long) defaultValue(fields()[0]);
        record.taskTitle = fieldSetFlags()[1] ? this.taskTitle : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.assignedToUserId = fieldSetFlags()[2] ? this.assignedToUserId : (java.lang.Long) defaultValue(fields()[2]);
        record.assignedByUserId = fieldSetFlags()[3] ? this.assignedByUserId : (java.lang.Long) defaultValue(fields()[3]);
        record.projectId = fieldSetFlags()[4] ? this.projectId : (java.lang.Long) defaultValue(fields()[4]);
        record.projectTitle = fieldSetFlags()[5] ? this.projectTitle : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.assignedAt = fieldSetFlags()[6] ? this.assignedAt : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.deadline = fieldSetFlags()[7] ? this.deadline : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.priority = fieldSetFlags()[8] ? this.priority : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskAssignedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskAssignedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskAssignedEvent>
    READER$ = (org.apache.avro.io.DatumReader<TaskAssignedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.taskId);

    out.writeString(this.taskTitle);

    out.writeLong(this.assignedToUserId);

    out.writeLong(this.assignedByUserId);

    out.writeLong(this.projectId);

    out.writeString(this.projectTitle);

    out.writeString(this.assignedAt);

    if (this.deadline == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.deadline);
    }

    if (this.priority == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.priority);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.taskId = in.readLong();

      this.taskTitle = in.readString(this.taskTitle instanceof Utf8 ? (Utf8)this.taskTitle : null);

      this.assignedToUserId = in.readLong();

      this.assignedByUserId = in.readLong();

      this.projectId = in.readLong();

      this.projectTitle = in.readString(this.projectTitle instanceof Utf8 ? (Utf8)this.projectTitle : null);

      this.assignedAt = in.readString(this.assignedAt instanceof Utf8 ? (Utf8)this.assignedAt : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.deadline = null;
      } else {
        this.deadline = in.readString(this.deadline instanceof Utf8 ? (Utf8)this.deadline : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.priority = null;
      } else {
        this.priority = in.readString(this.priority instanceof Utf8 ? (Utf8)this.priority : null);
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.taskId = in.readLong();
          break;

        case 1:
          this.taskTitle = in.readString(this.taskTitle instanceof Utf8 ? (Utf8)this.taskTitle : null);
          break;

        case 2:
          this.assignedToUserId = in.readLong();
          break;

        case 3:
          this.assignedByUserId = in.readLong();
          break;

        case 4:
          this.projectId = in.readLong();
          break;

        case 5:
          this.projectTitle = in.readString(this.projectTitle instanceof Utf8 ? (Utf8)this.projectTitle : null);
          break;

        case 6:
          this.assignedAt = in.readString(this.assignedAt instanceof Utf8 ? (Utf8)this.assignedAt : null);
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.deadline = null;
          } else {
            this.deadline = in.readString(this.deadline instanceof Utf8 ? (Utf8)this.deadline : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.priority = null;
          } else {
            this.priority = in.readString(this.priority instanceof Utf8 ? (Utf8)this.priority : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










