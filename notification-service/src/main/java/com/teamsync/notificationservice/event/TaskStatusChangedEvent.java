/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.teamsync.notificationservice.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaskStatusChangedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2206493772444825463L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskStatusChangedEvent\",\"namespace\":\"com.teamsync.notificationservice.event\",\"fields\":[{\"name\":\"taskId\",\"type\":\"long\"},{\"name\":\"taskTitle\",\"type\":\"string\"},{\"name\":\"oldStatus\",\"type\":\"string\"},{\"name\":\"newStatus\",\"type\":\"string\"},{\"name\":\"changedByUserId\",\"type\":\"long\"},{\"name\":\"assignedToUserId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"projectId\",\"type\":\"long\"},{\"name\":\"projectTitle\",\"type\":\"string\"},{\"name\":\"changedAt\",\"type\":\"string\"},{\"name\":\"comment\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskStatusChangedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskStatusChangedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskStatusChangedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskStatusChangedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskStatusChangedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskStatusChangedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskStatusChangedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskStatusChangedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskStatusChangedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long taskId;
  private java.lang.CharSequence taskTitle;
  private java.lang.CharSequence oldStatus;
  private java.lang.CharSequence newStatus;
  private long changedByUserId;
  private java.lang.Long assignedToUserId;
  private long projectId;
  private java.lang.CharSequence projectTitle;
  private java.lang.CharSequence changedAt;
  private java.lang.CharSequence comment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskStatusChangedEvent() {}

  /**
   * All-args constructor.
   * @param taskId The new value for taskId
   * @param taskTitle The new value for taskTitle
   * @param oldStatus The new value for oldStatus
   * @param newStatus The new value for newStatus
   * @param changedByUserId The new value for changedByUserId
   * @param assignedToUserId The new value for assignedToUserId
   * @param projectId The new value for projectId
   * @param projectTitle The new value for projectTitle
   * @param changedAt The new value for changedAt
   * @param comment The new value for comment
   */
  public TaskStatusChangedEvent(java.lang.Long taskId, java.lang.CharSequence taskTitle, java.lang.CharSequence oldStatus, java.lang.CharSequence newStatus, java.lang.Long changedByUserId, java.lang.Long assignedToUserId, java.lang.Long projectId, java.lang.CharSequence projectTitle, java.lang.CharSequence changedAt, java.lang.CharSequence comment) {
    this.taskId = taskId;
    this.taskTitle = taskTitle;
    this.oldStatus = oldStatus;
    this.newStatus = newStatus;
    this.changedByUserId = changedByUserId;
    this.assignedToUserId = assignedToUserId;
    this.projectId = projectId;
    this.projectTitle = projectTitle;
    this.changedAt = changedAt;
    this.comment = comment;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taskId;
    case 1: return taskTitle;
    case 2: return oldStatus;
    case 3: return newStatus;
    case 4: return changedByUserId;
    case 5: return assignedToUserId;
    case 6: return projectId;
    case 7: return projectTitle;
    case 8: return changedAt;
    case 9: return comment;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taskId = (java.lang.Long)value$; break;
    case 1: taskTitle = (java.lang.CharSequence)value$; break;
    case 2: oldStatus = (java.lang.CharSequence)value$; break;
    case 3: newStatus = (java.lang.CharSequence)value$; break;
    case 4: changedByUserId = (java.lang.Long)value$; break;
    case 5: assignedToUserId = (java.lang.Long)value$; break;
    case 6: projectId = (java.lang.Long)value$; break;
    case 7: projectTitle = (java.lang.CharSequence)value$; break;
    case 8: changedAt = (java.lang.CharSequence)value$; break;
    case 9: comment = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'taskId' field.
   * @return The value of the 'taskId' field.
   */
  public long getTaskId() {
    return taskId;
  }


  /**
   * Sets the value of the 'taskId' field.
   * @param value the value to set.
   */
  public void setTaskId(long value) {
    this.taskId = value;
  }

  /**
   * Gets the value of the 'taskTitle' field.
   * @return The value of the 'taskTitle' field.
   */
  public java.lang.CharSequence getTaskTitle() {
    return taskTitle;
  }


  /**
   * Sets the value of the 'taskTitle' field.
   * @param value the value to set.
   */
  public void setTaskTitle(java.lang.CharSequence value) {
    this.taskTitle = value;
  }

  /**
   * Gets the value of the 'oldStatus' field.
   * @return The value of the 'oldStatus' field.
   */
  public java.lang.CharSequence getOldStatus() {
    return oldStatus;
  }


  /**
   * Sets the value of the 'oldStatus' field.
   * @param value the value to set.
   */
  public void setOldStatus(java.lang.CharSequence value) {
    this.oldStatus = value;
  }

  /**
   * Gets the value of the 'newStatus' field.
   * @return The value of the 'newStatus' field.
   */
  public java.lang.CharSequence getNewStatus() {
    return newStatus;
  }


  /**
   * Sets the value of the 'newStatus' field.
   * @param value the value to set.
   */
  public void setNewStatus(java.lang.CharSequence value) {
    this.newStatus = value;
  }

  /**
   * Gets the value of the 'changedByUserId' field.
   * @return The value of the 'changedByUserId' field.
   */
  public long getChangedByUserId() {
    return changedByUserId;
  }


  /**
   * Sets the value of the 'changedByUserId' field.
   * @param value the value to set.
   */
  public void setChangedByUserId(long value) {
    this.changedByUserId = value;
  }

  /**
   * Gets the value of the 'assignedToUserId' field.
   * @return The value of the 'assignedToUserId' field.
   */
  public java.lang.Long getAssignedToUserId() {
    return assignedToUserId;
  }


  /**
   * Sets the value of the 'assignedToUserId' field.
   * @param value the value to set.
   */
  public void setAssignedToUserId(java.lang.Long value) {
    this.assignedToUserId = value;
  }

  /**
   * Gets the value of the 'projectId' field.
   * @return The value of the 'projectId' field.
   */
  public long getProjectId() {
    return projectId;
  }


  /**
   * Sets the value of the 'projectId' field.
   * @param value the value to set.
   */
  public void setProjectId(long value) {
    this.projectId = value;
  }

  /**
   * Gets the value of the 'projectTitle' field.
   * @return The value of the 'projectTitle' field.
   */
  public java.lang.CharSequence getProjectTitle() {
    return projectTitle;
  }


  /**
   * Sets the value of the 'projectTitle' field.
   * @param value the value to set.
   */
  public void setProjectTitle(java.lang.CharSequence value) {
    this.projectTitle = value;
  }

  /**
   * Gets the value of the 'changedAt' field.
   * @return The value of the 'changedAt' field.
   */
  public java.lang.CharSequence getChangedAt() {
    return changedAt;
  }


  /**
   * Sets the value of the 'changedAt' field.
   * @param value the value to set.
   */
  public void setChangedAt(java.lang.CharSequence value) {
    this.changedAt = value;
  }

  /**
   * Gets the value of the 'comment' field.
   * @return The value of the 'comment' field.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }


  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
  }

  /**
   * Creates a new TaskStatusChangedEvent RecordBuilder.
   * @return A new TaskStatusChangedEvent RecordBuilder
   */
  public static com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder newBuilder() {
    return new com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder();
  }

  /**
   * Creates a new TaskStatusChangedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskStatusChangedEvent RecordBuilder
   */
  public static com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder newBuilder(com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder other) {
    if (other == null) {
      return new com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder();
    } else {
      return new com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder(other);
    }
  }

  /**
   * Creates a new TaskStatusChangedEvent RecordBuilder by copying an existing TaskStatusChangedEvent instance.
   * @param other The existing instance to copy.
   * @return A new TaskStatusChangedEvent RecordBuilder
   */
  public static com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder newBuilder(com.teamsync.notificationservice.event.TaskStatusChangedEvent other) {
    if (other == null) {
      return new com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder();
    } else {
      return new com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskStatusChangedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskStatusChangedEvent>
    implements org.apache.avro.data.RecordBuilder<TaskStatusChangedEvent> {

    private long taskId;
    private java.lang.CharSequence taskTitle;
    private java.lang.CharSequence oldStatus;
    private java.lang.CharSequence newStatus;
    private long changedByUserId;
    private java.lang.Long assignedToUserId;
    private long projectId;
    private java.lang.CharSequence projectTitle;
    private java.lang.CharSequence changedAt;
    private java.lang.CharSequence comment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.taskTitle)) {
        this.taskTitle = data().deepCopy(fields()[1].schema(), other.taskTitle);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.oldStatus)) {
        this.oldStatus = data().deepCopy(fields()[2].schema(), other.oldStatus);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.newStatus)) {
        this.newStatus = data().deepCopy(fields()[3].schema(), other.newStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.changedByUserId)) {
        this.changedByUserId = data().deepCopy(fields()[4].schema(), other.changedByUserId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.assignedToUserId)) {
        this.assignedToUserId = data().deepCopy(fields()[5].schema(), other.assignedToUserId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.projectId)) {
        this.projectId = data().deepCopy(fields()[6].schema(), other.projectId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.projectTitle)) {
        this.projectTitle = data().deepCopy(fields()[7].schema(), other.projectTitle);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.changedAt)) {
        this.changedAt = data().deepCopy(fields()[8].schema(), other.changedAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.comment)) {
        this.comment = data().deepCopy(fields()[9].schema(), other.comment);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskStatusChangedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.teamsync.notificationservice.event.TaskStatusChangedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskTitle)) {
        this.taskTitle = data().deepCopy(fields()[1].schema(), other.taskTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.oldStatus)) {
        this.oldStatus = data().deepCopy(fields()[2].schema(), other.oldStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newStatus)) {
        this.newStatus = data().deepCopy(fields()[3].schema(), other.newStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.changedByUserId)) {
        this.changedByUserId = data().deepCopy(fields()[4].schema(), other.changedByUserId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.assignedToUserId)) {
        this.assignedToUserId = data().deepCopy(fields()[5].schema(), other.assignedToUserId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.projectId)) {
        this.projectId = data().deepCopy(fields()[6].schema(), other.projectId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.projectTitle)) {
        this.projectTitle = data().deepCopy(fields()[7].schema(), other.projectTitle);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.changedAt)) {
        this.changedAt = data().deepCopy(fields()[8].schema(), other.changedAt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.comment)) {
        this.comment = data().deepCopy(fields()[9].schema(), other.comment);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'taskId' field.
      * @return The value.
      */
    public long getTaskId() {
      return taskId;
    }


    /**
      * Sets the value of the 'taskId' field.
      * @param value The value of 'taskId'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setTaskId(long value) {
      validate(fields()[0], value);
      this.taskId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taskId' field has been set.
      * @return True if the 'taskId' field has been set, false otherwise.
      */
    public boolean hasTaskId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taskId' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearTaskId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskTitle() {
      return taskTitle;
    }


    /**
      * Sets the value of the 'taskTitle' field.
      * @param value The value of 'taskTitle'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setTaskTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.taskTitle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'taskTitle' field has been set.
      * @return True if the 'taskTitle' field has been set, false otherwise.
      */
    public boolean hasTaskTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'taskTitle' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearTaskTitle() {
      taskTitle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldStatus' field.
      * @return The value.
      */
    public java.lang.CharSequence getOldStatus() {
      return oldStatus;
    }


    /**
      * Sets the value of the 'oldStatus' field.
      * @param value The value of 'oldStatus'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setOldStatus(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.oldStatus = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'oldStatus' field has been set.
      * @return True if the 'oldStatus' field has been set, false otherwise.
      */
    public boolean hasOldStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'oldStatus' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearOldStatus() {
      oldStatus = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'newStatus' field.
      * @return The value.
      */
    public java.lang.CharSequence getNewStatus() {
      return newStatus;
    }


    /**
      * Sets the value of the 'newStatus' field.
      * @param value The value of 'newStatus'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setNewStatus(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.newStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'newStatus' field has been set.
      * @return True if the 'newStatus' field has been set, false otherwise.
      */
    public boolean hasNewStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'newStatus' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearNewStatus() {
      newStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'changedByUserId' field.
      * @return The value.
      */
    public long getChangedByUserId() {
      return changedByUserId;
    }


    /**
      * Sets the value of the 'changedByUserId' field.
      * @param value The value of 'changedByUserId'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setChangedByUserId(long value) {
      validate(fields()[4], value);
      this.changedByUserId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'changedByUserId' field has been set.
      * @return True if the 'changedByUserId' field has been set, false otherwise.
      */
    public boolean hasChangedByUserId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'changedByUserId' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearChangedByUserId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignedToUserId' field.
      * @return The value.
      */
    public java.lang.Long getAssignedToUserId() {
      return assignedToUserId;
    }


    /**
      * Sets the value of the 'assignedToUserId' field.
      * @param value The value of 'assignedToUserId'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setAssignedToUserId(java.lang.Long value) {
      validate(fields()[5], value);
      this.assignedToUserId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'assignedToUserId' field has been set.
      * @return True if the 'assignedToUserId' field has been set, false otherwise.
      */
    public boolean hasAssignedToUserId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'assignedToUserId' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearAssignedToUserId() {
      assignedToUserId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectId' field.
      * @return The value.
      */
    public long getProjectId() {
      return projectId;
    }


    /**
      * Sets the value of the 'projectId' field.
      * @param value The value of 'projectId'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setProjectId(long value) {
      validate(fields()[6], value);
      this.projectId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'projectId' field has been set.
      * @return True if the 'projectId' field has been set, false otherwise.
      */
    public boolean hasProjectId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'projectId' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearProjectId() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getProjectTitle() {
      return projectTitle;
    }


    /**
      * Sets the value of the 'projectTitle' field.
      * @param value The value of 'projectTitle'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setProjectTitle(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.projectTitle = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'projectTitle' field has been set.
      * @return True if the 'projectTitle' field has been set, false otherwise.
      */
    public boolean hasProjectTitle() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'projectTitle' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearProjectTitle() {
      projectTitle = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'changedAt' field.
      * @return The value.
      */
    public java.lang.CharSequence getChangedAt() {
      return changedAt;
    }


    /**
      * Sets the value of the 'changedAt' field.
      * @param value The value of 'changedAt'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setChangedAt(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.changedAt = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'changedAt' field has been set.
      * @return True if the 'changedAt' field has been set, false otherwise.
      */
    public boolean hasChangedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'changedAt' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearChangedAt() {
      changedAt = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * @return The value.
      */
    public java.lang.CharSequence getComment() {
      return comment;
    }


    /**
      * Sets the value of the 'comment' field.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.comment = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'comment' field has been set.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'comment' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.TaskStatusChangedEvent.Builder clearComment() {
      comment = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskStatusChangedEvent build() {
      try {
        TaskStatusChangedEvent record = new TaskStatusChangedEvent();
        record.taskId = fieldSetFlags()[0] ? this.taskId : (java.lang.Long) defaultValue(fields()[0]);
        record.taskTitle = fieldSetFlags()[1] ? this.taskTitle : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.oldStatus = fieldSetFlags()[2] ? this.oldStatus : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.newStatus = fieldSetFlags()[3] ? this.newStatus : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.changedByUserId = fieldSetFlags()[4] ? this.changedByUserId : (java.lang.Long) defaultValue(fields()[4]);
        record.assignedToUserId = fieldSetFlags()[5] ? this.assignedToUserId : (java.lang.Long) defaultValue(fields()[5]);
        record.projectId = fieldSetFlags()[6] ? this.projectId : (java.lang.Long) defaultValue(fields()[6]);
        record.projectTitle = fieldSetFlags()[7] ? this.projectTitle : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.changedAt = fieldSetFlags()[8] ? this.changedAt : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.comment = fieldSetFlags()[9] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskStatusChangedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskStatusChangedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskStatusChangedEvent>
    READER$ = (org.apache.avro.io.DatumReader<TaskStatusChangedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.taskId);

    out.writeString(this.taskTitle);

    out.writeString(this.oldStatus);

    out.writeString(this.newStatus);

    out.writeLong(this.changedByUserId);

    if (this.assignedToUserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.assignedToUserId);
    }

    out.writeLong(this.projectId);

    out.writeString(this.projectTitle);

    out.writeString(this.changedAt);

    if (this.comment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.comment);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.taskId = in.readLong();

      this.taskTitle = in.readString(this.taskTitle instanceof Utf8 ? (Utf8)this.taskTitle : null);

      this.oldStatus = in.readString(this.oldStatus instanceof Utf8 ? (Utf8)this.oldStatus : null);

      this.newStatus = in.readString(this.newStatus instanceof Utf8 ? (Utf8)this.newStatus : null);

      this.changedByUserId = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.assignedToUserId = null;
      } else {
        this.assignedToUserId = in.readLong();
      }

      this.projectId = in.readLong();

      this.projectTitle = in.readString(this.projectTitle instanceof Utf8 ? (Utf8)this.projectTitle : null);

      this.changedAt = in.readString(this.changedAt instanceof Utf8 ? (Utf8)this.changedAt : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.comment = null;
      } else {
        this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8)this.comment : null);
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.taskId = in.readLong();
          break;

        case 1:
          this.taskTitle = in.readString(this.taskTitle instanceof Utf8 ? (Utf8)this.taskTitle : null);
          break;

        case 2:
          this.oldStatus = in.readString(this.oldStatus instanceof Utf8 ? (Utf8)this.oldStatus : null);
          break;

        case 3:
          this.newStatus = in.readString(this.newStatus instanceof Utf8 ? (Utf8)this.newStatus : null);
          break;

        case 4:
          this.changedByUserId = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.assignedToUserId = null;
          } else {
            this.assignedToUserId = in.readLong();
          }
          break;

        case 6:
          this.projectId = in.readLong();
          break;

        case 7:
          this.projectTitle = in.readString(this.projectTitle instanceof Utf8 ? (Utf8)this.projectTitle : null);
          break;

        case 8:
          this.changedAt = in.readString(this.changedAt instanceof Utf8 ? (Utf8)this.changedAt : null);
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.comment = null;
          } else {
            this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8)this.comment : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










