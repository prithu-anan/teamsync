/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.teamsync.notificationservice.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProjectMemberAddedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3333744603934998954L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProjectMemberAddedEvent\",\"namespace\":\"com.teamsync.notificationservice.event\",\"fields\":[{\"name\":\"projectId\",\"type\":\"long\"},{\"name\":\"projectTitle\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"long\"},{\"name\":\"addedByUserId\",\"type\":\"long\"},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"addedAt\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProjectMemberAddedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProjectMemberAddedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProjectMemberAddedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProjectMemberAddedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProjectMemberAddedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProjectMemberAddedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProjectMemberAddedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProjectMemberAddedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProjectMemberAddedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long projectId;
  private java.lang.CharSequence projectTitle;
  private long userId;
  private long addedByUserId;
  private java.lang.CharSequence role;
  private java.lang.CharSequence addedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProjectMemberAddedEvent() {}

  /**
   * All-args constructor.
   * @param projectId The new value for projectId
   * @param projectTitle The new value for projectTitle
   * @param userId The new value for userId
   * @param addedByUserId The new value for addedByUserId
   * @param role The new value for role
   * @param addedAt The new value for addedAt
   */
  public ProjectMemberAddedEvent(java.lang.Long projectId, java.lang.CharSequence projectTitle, java.lang.Long userId, java.lang.Long addedByUserId, java.lang.CharSequence role, java.lang.CharSequence addedAt) {
    this.projectId = projectId;
    this.projectTitle = projectTitle;
    this.userId = userId;
    this.addedByUserId = addedByUserId;
    this.role = role;
    this.addedAt = addedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return projectId;
    case 1: return projectTitle;
    case 2: return userId;
    case 3: return addedByUserId;
    case 4: return role;
    case 5: return addedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: projectId = (java.lang.Long)value$; break;
    case 1: projectTitle = (java.lang.CharSequence)value$; break;
    case 2: userId = (java.lang.Long)value$; break;
    case 3: addedByUserId = (java.lang.Long)value$; break;
    case 4: role = (java.lang.CharSequence)value$; break;
    case 5: addedAt = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'projectId' field.
   * @return The value of the 'projectId' field.
   */
  public long getProjectId() {
    return projectId;
  }


  /**
   * Sets the value of the 'projectId' field.
   * @param value the value to set.
   */
  public void setProjectId(long value) {
    this.projectId = value;
  }

  /**
   * Gets the value of the 'projectTitle' field.
   * @return The value of the 'projectTitle' field.
   */
  public java.lang.CharSequence getProjectTitle() {
    return projectTitle;
  }


  /**
   * Sets the value of the 'projectTitle' field.
   * @param value the value to set.
   */
  public void setProjectTitle(java.lang.CharSequence value) {
    this.projectTitle = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public long getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'addedByUserId' field.
   * @return The value of the 'addedByUserId' field.
   */
  public long getAddedByUserId() {
    return addedByUserId;
  }


  /**
   * Sets the value of the 'addedByUserId' field.
   * @param value the value to set.
   */
  public void setAddedByUserId(long value) {
    this.addedByUserId = value;
  }

  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public java.lang.CharSequence getRole() {
    return role;
  }


  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(java.lang.CharSequence value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'addedAt' field.
   * @return The value of the 'addedAt' field.
   */
  public java.lang.CharSequence getAddedAt() {
    return addedAt;
  }


  /**
   * Sets the value of the 'addedAt' field.
   * @param value the value to set.
   */
  public void setAddedAt(java.lang.CharSequence value) {
    this.addedAt = value;
  }

  /**
   * Creates a new ProjectMemberAddedEvent RecordBuilder.
   * @return A new ProjectMemberAddedEvent RecordBuilder
   */
  public static com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder newBuilder() {
    return new com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder();
  }

  /**
   * Creates a new ProjectMemberAddedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProjectMemberAddedEvent RecordBuilder
   */
  public static com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder newBuilder(com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder other) {
    if (other == null) {
      return new com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder();
    } else {
      return new com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder(other);
    }
  }

  /**
   * Creates a new ProjectMemberAddedEvent RecordBuilder by copying an existing ProjectMemberAddedEvent instance.
   * @param other The existing instance to copy.
   * @return A new ProjectMemberAddedEvent RecordBuilder
   */
  public static com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder newBuilder(com.teamsync.notificationservice.event.ProjectMemberAddedEvent other) {
    if (other == null) {
      return new com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder();
    } else {
      return new com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProjectMemberAddedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProjectMemberAddedEvent>
    implements org.apache.avro.data.RecordBuilder<ProjectMemberAddedEvent> {

    private long projectId;
    private java.lang.CharSequence projectTitle;
    private long userId;
    private long addedByUserId;
    private java.lang.CharSequence role;
    private java.lang.CharSequence addedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.projectId)) {
        this.projectId = data().deepCopy(fields()[0].schema(), other.projectId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.projectTitle)) {
        this.projectTitle = data().deepCopy(fields()[1].schema(), other.projectTitle);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.addedByUserId)) {
        this.addedByUserId = data().deepCopy(fields()[3].schema(), other.addedByUserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.role)) {
        this.role = data().deepCopy(fields()[4].schema(), other.role);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.addedAt)) {
        this.addedAt = data().deepCopy(fields()[5].schema(), other.addedAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ProjectMemberAddedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.teamsync.notificationservice.event.ProjectMemberAddedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.projectId)) {
        this.projectId = data().deepCopy(fields()[0].schema(), other.projectId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.projectTitle)) {
        this.projectTitle = data().deepCopy(fields()[1].schema(), other.projectTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.addedByUserId)) {
        this.addedByUserId = data().deepCopy(fields()[3].schema(), other.addedByUserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.role)) {
        this.role = data().deepCopy(fields()[4].schema(), other.role);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.addedAt)) {
        this.addedAt = data().deepCopy(fields()[5].schema(), other.addedAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'projectId' field.
      * @return The value.
      */
    public long getProjectId() {
      return projectId;
    }


    /**
      * Sets the value of the 'projectId' field.
      * @param value The value of 'projectId'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder setProjectId(long value) {
      validate(fields()[0], value);
      this.projectId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'projectId' field has been set.
      * @return True if the 'projectId' field has been set, false otherwise.
      */
    public boolean hasProjectId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'projectId' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder clearProjectId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getProjectTitle() {
      return projectTitle;
    }


    /**
      * Sets the value of the 'projectTitle' field.
      * @param value The value of 'projectTitle'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder setProjectTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.projectTitle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'projectTitle' field has been set.
      * @return True if the 'projectTitle' field has been set, false otherwise.
      */
    public boolean hasProjectTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'projectTitle' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder clearProjectTitle() {
      projectTitle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public long getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder setUserId(long value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder clearUserId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'addedByUserId' field.
      * @return The value.
      */
    public long getAddedByUserId() {
      return addedByUserId;
    }


    /**
      * Sets the value of the 'addedByUserId' field.
      * @param value The value of 'addedByUserId'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder setAddedByUserId(long value) {
      validate(fields()[3], value);
      this.addedByUserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'addedByUserId' field has been set.
      * @return True if the 'addedByUserId' field has been set, false otherwise.
      */
    public boolean hasAddedByUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'addedByUserId' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder clearAddedByUserId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public java.lang.CharSequence getRole() {
      return role;
    }


    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder setRole(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.role = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder clearRole() {
      role = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'addedAt' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddedAt() {
      return addedAt;
    }


    /**
      * Sets the value of the 'addedAt' field.
      * @param value The value of 'addedAt'.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder setAddedAt(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.addedAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'addedAt' field has been set.
      * @return True if the 'addedAt' field has been set, false otherwise.
      */
    public boolean hasAddedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'addedAt' field.
      * @return This builder.
      */
    public com.teamsync.notificationservice.event.ProjectMemberAddedEvent.Builder clearAddedAt() {
      addedAt = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProjectMemberAddedEvent build() {
      try {
        ProjectMemberAddedEvent record = new ProjectMemberAddedEvent();
        record.projectId = fieldSetFlags()[0] ? this.projectId : (java.lang.Long) defaultValue(fields()[0]);
        record.projectTitle = fieldSetFlags()[1] ? this.projectTitle : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.Long) defaultValue(fields()[2]);
        record.addedByUserId = fieldSetFlags()[3] ? this.addedByUserId : (java.lang.Long) defaultValue(fields()[3]);
        record.role = fieldSetFlags()[4] ? this.role : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.addedAt = fieldSetFlags()[5] ? this.addedAt : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProjectMemberAddedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProjectMemberAddedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProjectMemberAddedEvent>
    READER$ = (org.apache.avro.io.DatumReader<ProjectMemberAddedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.projectId);

    out.writeString(this.projectTitle);

    out.writeLong(this.userId);

    out.writeLong(this.addedByUserId);

    out.writeString(this.role);

    out.writeString(this.addedAt);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.projectId = in.readLong();

      this.projectTitle = in.readString(this.projectTitle instanceof Utf8 ? (Utf8)this.projectTitle : null);

      this.userId = in.readLong();

      this.addedByUserId = in.readLong();

      this.role = in.readString(this.role instanceof Utf8 ? (Utf8)this.role : null);

      this.addedAt = in.readString(this.addedAt instanceof Utf8 ? (Utf8)this.addedAt : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.projectId = in.readLong();
          break;

        case 1:
          this.projectTitle = in.readString(this.projectTitle instanceof Utf8 ? (Utf8)this.projectTitle : null);
          break;

        case 2:
          this.userId = in.readLong();
          break;

        case 3:
          this.addedByUserId = in.readLong();
          break;

        case 4:
          this.role = in.readString(this.role instanceof Utf8 ? (Utf8)this.role : null);
          break;

        case 5:
          this.addedAt = in.readString(this.addedAt instanceof Utf8 ? (Utf8)this.addedAt : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










